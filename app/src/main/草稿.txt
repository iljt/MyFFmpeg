
1.解封装【完全不考虑内存泄漏，有很多内存的问题，最简单的方式写完】
2.视频画面的渲染 ANativeWindow都是-Native层的
3.音频播放 OpenSLES用来播放声音的-都是Native层的
4.音频播放 OpenSLES用来播放声音的-都是Native层的
5.内存泄漏优化 + 音视频同步
6.拖动条


OpenCV

WebRTC


ffmpeg加入进来
rtmp：现在不用关心，我们后面讲推流的时候，专门讲rtmp

FFmpeg+rtmp 播放：rtmp地址直播 （本地文件，网络直播流）

硬编解码：手机的硬件去解码，尽量不用cpu，手机支持的芯片去解码 （不耗电），一秒钟 60帧
FFmpeg + 硬解码打开 + MediaCodec ---> 手机支持就硬编解码，否则也不能

软编解码：我们现在FFmpeg，根据CPU来的



        // 426*240
        // 视频文件：

        // 426*4=1704

        // 426 * 4 RGBA = 1704 (FFmpeg默认是 8字节除法 对齐)

        // ANatvieWindows(64字节除法 对齐) TODO

        /**
         ANatvieWindows bits == bits_dst_data;

         bits_dst_data(RGBA数据)

         // 参数1：目标   参数2：源RGBA数据    参数3:拷贝多少
         memcpy(bits_dst_data + 1792,  );


        // 实际一行数据大小：1704
        // 数据 数据 数据 数据 数据 数据


        // win_buf占位处理：1792 / 64 没有余数（能够对齐）
        // 占位 占位 占位 占位 占位 占位 占位

        // 数据 数据 数据 数据 数据 数据 空值 【按人家 win_buf 64字节法对齐，空值也OK】



         >>>>>>>>>>>>>>>>>>>>>>>
         我们的RGBA数据大小？
         答：
            426 * 4 = 1704  OK的   FFmpeg他的对齐是8字节  他以为OK的  8字节对齐数据

            ANativeWindow 用来渲染画面的 默认是 64字节对齐    1792 /  64 == 就能够被64字节对齐

         */

        // 实际一行数据大小：1704
        // 数据 数据 数据 数据 数据 数据

        // win_buf占位处理 17920
        // 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位 占位
        // 数据 数据 数据 数据 数据 数据 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值 空值
        // 空间会大

        // 我们可以不用计算：FFmpeg有API

        // gcc make 工具安装好， Windows Linux子系统 工具       Ubuntu 20 一次成功
        // Mac学生 TOOLCxxx成功了， 四大平台CPU 最新编译 通用的脚本

=======================================================

1.在activity中的onResume触发prepare函数，2.调用jni中的prepare函数，3.启动子线程解封装(打开音视频流，检测是否存在音视频流)，4.调用Activity中的start方法，进而又调到jni中的start函数，把未解码的音视频包放到队列中，解压音视频包，5.把音视频压缩包解码，让后把原始包重新放入队列中，6.拿出原始包播放

AVPacket *
AVFrame * 他是最大的  1920 * 1080 * 4  非常慎重 最大的

rgba 32bit, 4字节

rgba 16bit（兼容性不好）

字节对齐：
从0开始的字节对齐：算法 0 1 2 3 一次成功
算法需要遍历一把，取出0
算法在计算
最终用合成  0 1 2 3 N次成功
1 2 0 3 4 5 6

    要求很高的公司：不能  最简单的，最多的，兼容性最好 【基础】

真实中：google的libyuv库进行的转换，高效

显卡语言渲染，学习显卡语言，这个是高效的



C++层 900MB，内存泄漏引发奔溃

目标：C++层 38MB，这就是没有问题
     C++层 28MB 这才是我苛刻的要求
     C++层 24MB 不会上升了

思考：哪些地方有问题
 压缩包没有释放
 线程多
 管理混合

Java 层
C++层：

（解封装）
解封装：可以忽略都没有关系

重灾区，重头戏：
while AVPacket 压缩 大胖子
while AVFrame * 1920 * 1080 * 4
while

TODO AudioChannel.cpp （播放） 线程多 压缩包没有释放

JNICallbakcHelper.cpp （他太简单了，就是回调）

native-lib.cpp （JNI函数管理而已）

TODO VideoChannel.cpp（播放） 线程多 压缩包没有释放

fps25
一秒钟25帧

我们开发：单位：微妙，毫秒，秒  天 时

fps FFmpeg里面的描述单位:  有理数  无理数

分数都是有理数

有理数：
typedef struct AVRational{
    int num; ///< Numerator num分子
    int den; ///< Denominator den分母
} AVRational;

时间基Timebase理解：例如：（25fps 一秒25帧，那么每一帧==25分之1，而这个25分之1就是时间基概念）
分数都是有理数 100
分母：100
分子：60

1.注意点：分母：不能为0
2.注意点：不能出现无理数，必须是有理数  == AVRational         什么是无理数（分母4/分子10 这个就不行）

早期：学FFmpeg AVRational （计算后，不丢失 精度）

----
SDL画面的渲染 ----> 跨平台播放的  Windows，Macos，Android，iOS

